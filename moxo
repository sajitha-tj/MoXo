#!/bin/bash

################################################ 
#                                              #    
#        Title: MoXo                           #  
#        Author: sajitha_tj                    # 
#        Date: 18.05.2024                      #  
#        Version: 1.0                          # 
#                                              # 
################################################ 

# MoXo is a CTF Manager which helps you to remember important varibles in CTFs.
# MoXo is still in a development phase.


RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RESET='\033[0m'

DATA_FILE=".ctf_data_moxo" # This file stores all variables
XCLIP_IS_INSTALLED=0       # This is used to check for xclip availability before copying | 1 if installed 0 otherwise


banner(){
	echo -e "
• ▌ ▄ ·.       ▐▄• ▄       
·██ ▐███▪▪      █▌█▌▪▪     
▐█ ▌▐▌▐█· ▄█▀▄  ·██·  ▄█▀▄    ~ MoXo v1.0~ 
██ ██▌▐█▌▐█▌.▐▌▪▐█·█▌▐█▌.▐▌   [By: sajitha_tj]
▀▀  █▪▀▀▀ ▀█▄▀▪•▀▀ ▀▀ ▀█▄▀▪  
"
}

usage(){
	banner
	echo -e "Usage: moxo COMMAND VALUES

MoXo is a CTF management tool which will help you during CTF challenges.

First you have to initialize moxo.
It is recommended to initialize in a new directory specific for the challenge.
  moxo new <challenge name>

After initializing, you can use moxo to store different variables.
  moxo COMMAND VALUES

COMMANDS:
  new     initialize moxo for a new challenge
  set     set new variables or change existing ones
            usage: moxo set VARIABLE_NAME VARIABLE_VALUE
  get     get the value of a variable
            usage: moxo get VARIABLE_NAME
  reset   reset current configuration. same as new

Use only one COMMAND from above list at a time.

MoXo uses xclip to copy the values to your clipboard.
If xclip is installed, use CTRL+V to paste the value after using get command.

EXAMPLES:
	moxo new my ctf challenge    initialize moxo for a challenge named 'my ctf challenge'
	moxo set rhost 10.10.1.1     set the variable 'rhost' value to 10.10.1.1
	moxo set rhost 10.10.2.2     change variable 'rhost' value to 10.10.2.2
	moxo set sshPort 22          add new variable 'sshPort' with value 22
	moxo get RHOST               output the value of variable 'rhost' into stdout (and copy to clipboard if possible)

Glad to see you are rocking with moxo. Go forth and hack with glory!
Moxo is still in a development phase. New updates will come soon!"

}


# moxo uses xclip inorder to copy variable values to your clipboard
# This function checks if xclip is installed and if not try to install it
check_for_xclip(){
	XCLIP_CHECK=$(apt list 2>/dev/null | grep "xclip" | grep "installed")

	if [[ $XCLIP_CHECK == "" ]]; then
		echo -e "[!] xclip is not installed\n[!] Moxo uses xclip to copy variable values to the clipboard so that you can paste them directly with CTRL+V, after a get command"
		XCLIP_IS_INSTALLED=0
		read -p "[?] Do you want to install xclip? [y/n]" yn
		# installing xclip
		case $yn in
			[Yy]* )
				echo "[+] Installing xcip..."
				sudo apt install xclip && XCLIP_IS_INSTALLED=1
				;;
		esac

	else
		echo -e "[+] xclip is installed. Using xclip to copy variable values to clipboard\n[+] You can use CTRL+V to paste values after a get command"
		XCLIP_IS_INSTALLED=1
	fi
}


# use xclip to copy values that will be returned with the get command
use_xclip(){
	if [[ $XCLIP_IS_INSTALLED == 1 ]]; then
		echo $1 | xclip -sel clip
	fi
}


initialize(){
	NAME=$1
	PLATFORM=$2
	LHOST=$(ifconfig | grep destination | cut -d " " -f 10)
	# create the data file
	echo -e "NAME=$NAME\nRHOST=\nLHOST=$LHOST\nDOMAIN=\nPLATFORM=$PLATFORM\nNMAP_LOG=\n" > $DATA_FILE
	#check for xclip
	check_for_xclip
}


set_variables(){
	VARIABLE_NAME=$1
	VARIABLE_NAME=$(echo $VARIABLE_NAME | tr a-z A-Z)
	VARIABLE_VALUE=$2

	# check if the varible already exists
	IS_EXIST=$(grep "$VARIABLE_NAME=" $DATA_FILE)
	if [[ $IS_EXIST == "" ]];then
		echo "$VARIABLE_NAME=$VARIABLE_VALUE" > $DATA_FILE
		echo -e "[+] new variable added.\n$VARIABLE_NAME : $GREEN$VARIABLE_VALUE$RESET"
	else
		sed -i -e "s/$IS_EXIST/$VARIABLE_NAME=$VARIABLE_VALUE/g" $DATA_FILE
		OLD_VALUE=$(echo $IS_EXIST | cut -d "=" -f 2)
		if [[ $OLD_VALUE == $VARIABLE_VALUE ]]; then
			echo -e "[-] value already exists.\n$VARIABLE_NAME : $VARIABLE_VALUE"
		else
			if [[ $OLD_VALUE == "" ]]; then
				echo -e "[+] variable changed.\n$VARIABLE_NAME : $GREEN$VARIABLE_VALUE$RESET"
			else
				echo -e "[+] variable changed.\n$VARIABLE_NAME : $OLD_VALUE => $GREEN$VARIABLE_VALUE$RESET"
			fi
		fi
	fi
}

get_variables(){
	VARIABLE_NAME=$1
	VARIABLE_NAME=$(echo $VARIABLE_NAME | tr a-z A-Z)
	VARIABLE_VALUE=$(grep $VARIABLE_NAME $DATA_FILE | cut -d "=" -f 2)
	if [[ $VARIABLE_VALUE = "" ]];then
		echo "[-] $VARIABLE_NAME not configured" >&2
	else
		use_xclip $VARIABLE_VALUE
		echo "$VARIABLE_VALUE"
	fi
}

check_for_data_file(){
	if [ ! -f "$DATA_FILE" ];then
		echo -e "[-] Moxo hasn't initialized.\nUsage: moxo new [challenge name].\nTry 'moxo --help' for more information"
		exit
	fi
}


# main code
case $1 in
	"-h" | "--help" )
		usage
		;;
	new | reset)
		banner
		args=($*)
		
		for word in ${args[@]:1:$#}; do
			FirstLetter=$(echo ${word:0:1} | tr a-z A-Z)
			CHALLENGE_NAME="$CHALLENGE_NAME $FirstLetter${word:1:${#word}}"
		done
		CHALLENGE_NAME=$(echo $CHALLENGE_NAME | awk '{$1=$1};1')

		read -p "Platform of challenge: " PLATFORM
		
		initialize "$CHALLENGE_NAME" "$PLATFORM"
		;;

	set ) 
		check_for_data_file
		set_variables "$2" "$3"
		;;

	get )
		check_for_data_file
		get_variables "$2"
		;;
	* )
		usage
		;;
esac